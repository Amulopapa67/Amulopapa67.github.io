<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构OJ—串应用(Python)</title>
    <link href="/2023/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84OJ%E2%80%94%E4%B8%B2%E5%BA%94%E7%94%A8-Python/"/>
    <url>/2023/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84OJ%E2%80%94%E4%B8%B2%E5%BA%94%E7%94%A8-Python/</url>
    
    <content type="html"><![CDATA[<h1>深圳大学 数据结构OJ—串应用(Python)</h1><h1>前言</h1><p>本文是深圳大学数据结构实验课的一些记录，考虑到现在这门课基本没有Python版本的题解。所以特此整理出来，让Python programmer也可以更好地掌握这门课的内容。同时也是督促自己更高质量地完成实验。</p><h2 id="A-DS串应用–KMP算法"><strong>A. DS串应用–KMP算法</strong></h2><h3 id="题目描述">题目描述</h3><p>学习KMP算法，给出主串和模式串，求模式串在主串的位置</p><h3 id="输入">输入</h3><p>第一个输入t，表示有t个实例</p><p>第二行输入第1个实例的主串，第三行输入第1个实例的模式串</p><p>以此类推</p><h3 id="输出">输出</h3><p>第一行输出第1个实例的模式串的next值</p><p>第二行输出第1个实例的匹配位置，位置从1开始计算，如果匹配成功输出位置，匹配失败输出0</p><p>以此类推</p><h3 id="题解">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next</span>(<span class="hljs-params">pattern</span>):<br>    <span class="hljs-comment"># 生成next数组</span><br>    <span class="hljs-comment"># next[i]表示pattern[0:i]的最长公共前后缀长度</span><br>    <span class="hljs-comment"># next[0] = -1</span><br>    <span class="hljs-built_in">next</span> = [-<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(pattern)<br>    i = <span class="hljs-number">0</span><br>    j = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(pattern) - <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> j == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> pattern[i] == pattern[j]:<br>            i += <span class="hljs-number">1</span><br>            j += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">next</span>[i] = j<br>        <span class="hljs-keyword">else</span>:<br>            j = <span class="hljs-built_in">next</span>[j]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kmp</span>(<span class="hljs-params">string, pattern</span>):<br>    <span class="hljs-comment"># KMP算法</span><br>    <span class="hljs-built_in">next</span> = get_next(pattern)<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(string) <span class="hljs-keyword">and</span> j &lt; <span class="hljs-built_in">len</span>(pattern):<br>        <span class="hljs-keyword">if</span> j == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> string[i] == pattern[j]:<br>            i += <span class="hljs-number">1</span><br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            j = <span class="hljs-built_in">next</span>[j]<br>    <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(pattern):<br>        <span class="hljs-keyword">return</span> i - j + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        string = <span class="hljs-built_in">input</span>()<br>        pattern = <span class="hljs-built_in">input</span>()<br>        <span class="hljs-built_in">next</span> = get_next(pattern)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">next</span>)) + <span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(kmp(string, pattern))<br></code></pre></td></tr></table></figure><h2 id="B-DS串应用–串替换"><strong>B. DS串应用–串替换</strong></h2><h3 id="题目描述-2">题目描述</h3><p>给出主串、模式串、替换串，用KMP算法找出模式串在主串的位置，然后用替换串的字符替换掉模式串</p><p>本题只考虑一处替换的情况，如果你想做的完美一些，能够实现多处替换那</p><p>可能需要考虑模式串和替换串长度不一致的情况</p><h3 id="输入-2">输入</h3><p>第一个输入t，表示有t个实例</p><p>第二行输入第1个实例的主串，第三行输入第1个实例的模式串，第四行输入第1个实例的替换串</p><p>以此类推</p><h3 id="输出-2">输出</h3><p>第一行输出第1个实例的主串</p><p>第二行输出第1个实例的主串替换后结果，如果没有发生替换就输出主串原来的内容。</p><p>以此类推</p><h3 id="题解-2">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next</span>(<span class="hljs-params">pattern</span>):<br>    <span class="hljs-built_in">next</span> = [-<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(pattern)<br>    i = <span class="hljs-number">0</span><br>    j = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(pattern) - <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> j == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> pattern[i] == pattern[j]:<br>            i += <span class="hljs-number">1</span><br>            j += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">next</span>[i] = j<br>        <span class="hljs-keyword">else</span>:<br>            j = <span class="hljs-built_in">next</span>[j]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kmp</span>(<span class="hljs-params">string, pattern</span>):<br>    <span class="hljs-built_in">next</span> = get_next(pattern)<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(string) <span class="hljs-keyword">and</span> j &lt; <span class="hljs-built_in">len</span>(pattern):<br>        <span class="hljs-keyword">if</span> j == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> string[i] == pattern[j]:<br>            i += <span class="hljs-number">1</span><br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            j = <span class="hljs-built_in">next</span>[j]<br>    <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(pattern):<br>        <span class="hljs-keyword">return</span> i - j + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace</span>(<span class="hljs-params">string, pattern, new</span>):<br>    <span class="hljs-keyword">if</span> kmp(string, pattern):<br>        loc = kmp(string, pattern)<br>        <span class="hljs-keyword">return</span> string[:loc-<span class="hljs-number">1</span>] + new + string[loc+<span class="hljs-built_in">len</span>(pattern)-<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> string<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        string = <span class="hljs-built_in">input</span>()<br>        pattern = <span class="hljs-built_in">input</span>()<br>        new = <span class="hljs-built_in">input</span>()<br>        <span class="hljs-built_in">print</span>(string)<br>        <span class="hljs-built_in">print</span>(replace(string, pattern, new))<br></code></pre></td></tr></table></figure><h2 id="C-串应用-计算一个串的最长的真前后缀"><strong>C. 串应用- 计算一个串的最长的真前后缀</strong></h2><h3 id="题目描述-3">题目描述</h3><p>给定一个串，如ABCDAB，则ABCDAB的真前缀有：{ A, AB,ABC, ABCD, ABCDA }ABCDAB的真后缀有：{ B, AB,DAB, CDAB, BCDAB } 因此，该串的真前缀和真后缀中最长的相等串为AB，我们称之为该串的“最长的真前后缀”。试实现一个函数string matched_Prefix_Postfix(string str)，得到输入串str的最长的真前后缀。若不存在最长的真前后缀则输出empty</p><h3 id="输入-3">输入</h3><p>第1行：串的个数 n第2行到第n+1行：n个字符串</p><h3 id="输出-3">输出</h3><p>n个最长的真前后缀，若不存在最长的真前后缀则输出empty。</p><h3 id="题解-3">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    string = <span class="hljs-built_in">input</span>()<br>    sub = <span class="hljs-string">&#x27;empty&#x27;</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(string)):<br>        <span class="hljs-keyword">if</span> string[:l] == string[<span class="hljs-built_in">len</span>(string)-l:]:<br>            sub = string[:l]<br>    <span class="hljs-built_in">print</span>(sub)<br></code></pre></td></tr></table></figure><h2 id="D-DS串应用—最长重复子串"><strong>D. DS串应用—最长重复子串</strong></h2><h3 id="题目描述-4">题目描述</h3><p>求串的最长重复子串长度（子串不重叠）。例如：abcaefabcabc的最长重复子串是串abca，长度为4。</p><h3 id="输入-4">输入</h3><p>测试次数t</p><p>t个测试串</p><h3 id="输出-4">输出</h3><p>对每个测试串，输出最长重复子串长度，若没有重复子串，输出-1</p><h3 id="题解-4">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max_sub_str</span>(<span class="hljs-params">s</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    max_len = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> s[i] == s[j]:<br>                k = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> i+k &lt; n <span class="hljs-keyword">and</span> j+k &lt; n <span class="hljs-keyword">and</span> i+k &lt; j <span class="hljs-keyword">and</span> s[i+k] == s[j+k]:<br>                    k += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> k &gt; max_len:<br>                    max_len = k<br>    <span class="hljs-keyword">if</span> max_len ==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> max_len<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        s = <span class="hljs-built_in">input</span>()<br>        <span class="hljs-built_in">print</span>(max_sub_str(s))<br></code></pre></td></tr></table></figure><h2 id="E-可重叠子串-Ver-I"><strong>E. 可重叠子串 (Ver. I)</strong></h2><h3 id="题目描述-5">题目描述</h3><p>给定一个字符串（模式串）和一些待查找的字符串，求每个待查找字符串在模式串中出现的次数（可重叠）</p><h3 id="输入-5">输入</h3><p>第一行输入t，表示有t组测试数据</p><p>每一组测试数据包含多行：</p><p>每一组的第一行包括一个字符串P，长度不超过105，且非空串</p><p>每一组的第二行包括一个整数N，代表待查找的字符串数量 (1 &lt;= N &lt;= 5)</p><p>每一组接下来的N行，每一行包括一个待查找的字符串，其长度不超过50，且非空串</p><h3 id="输出-5">输出</h3><p>对于每组测试数据，</p><p>输出每个待查找字符串出现的次数，</p><p>具体输出见样例</p><h3 id="题解-5">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">pattern, string</span>):<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string) - <span class="hljs-built_in">len</span>(pattern) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> string[i:i + <span class="hljs-built_in">len</span>(pattern)] == pattern:<br>            count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br><br>t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    string = <span class="hljs-built_in">input</span>()<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        pattern = <span class="hljs-built_in">input</span>()<br>        <span class="hljs-built_in">print</span>(pattern + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(search(pattern, string)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据结构</tag>
      
      <tag>串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构OJ—二叉树(Python)</title>
    <link href="/2023/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84OJ%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91-Python/"/>
    <url>/2023/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84OJ%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91-Python/</url>
    
    <content type="html"><![CDATA[<h1>深圳大学 数据结构OJ—二叉树(Python)</h1><h1>前言</h1><p>本文是深圳大学数据结构实验课的一些记录，考虑到现在这门课基本没有Python版本的题解。所以特此整理出来，让Python programmer也可以更好地掌握这门课的内容。同时也是督促自己更高质量地完成实验。</p><h2 id="A-DS二叉树—二叉树构建与遍历"><strong>A. DS二叉树—二叉树构建与遍历</strong></h2><h3 id="题目描述">题目描述</h3><p>第一行输入一个整数t，表示有t个二叉树</p><p>第二行起输入每个二叉树的先序遍历结果，空树用字符‘#’表示，连续输入t行。</p><h3 id="输入">输入</h3><p>第一行输入一个整数t，表示有t个二叉树</p><p>第二行起输入每个二叉树的先序遍历结果，空树用字符‘#’表示，连续输入t行</p><h3 id="输出">输出</h3><p>输出每个二叉树的先序遍历、中序遍历和后序遍历结果。</p><h3 id="题解">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTreeNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data</span>):<br>        self.data = data<br>        self.lchild = <span class="hljs-literal">None</span><br>        self.rchild = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>():<br>    <span class="hljs-comment"># 用先序遍历的结果创建二叉树，空节点用&#x27;#&#x27;表示</span><br>    <span class="hljs-comment"># 采用递归建树</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createBiTree</span>(<span class="hljs-params">self, PreOrderResult: <span class="hljs-built_in">str</span></span>):<br>        self.Treestring = PreOrderResult<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.Treestring) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> self.Treestring[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = BiTreeNode(self.Treestring[<span class="hljs-number">0</span>])<br>        self.Treestring = self.Treestring[<span class="hljs-number">1</span>:]<br>        root.lchild = self.createBiTree(self.Treestring)<br>        self.Treestring = self.Treestring[<span class="hljs-number">1</span>:]<br>        root.rchild = self.createBiTree(self.Treestring)<br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.preOrder(root.lchild)<br>        self.preOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.inOrder(root.lchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.inOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.postOrder(root.lchild)<br>        self.postOrder(root.rchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        PreOrderResult = <span class="hljs-built_in">input</span>()<br>        tree = BiTree()<br>        root = tree.createBiTree(PreOrderResult)<br>        tree.preOrder(root)<br>        <span class="hljs-built_in">print</span>()<br>        tree.inOrder(root)<br>        <span class="hljs-built_in">print</span>()<br>        tree.postOrder(root)<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h3 id="PS">PS</h3><p>值得注意的是，这道题的题解和之后的建树有点不一样。A题的建树函数参数是字符串，但是在后面的题中，空结点用‘0’表示而非本题的‘#’。如果用同样的建树函数，会出现不知原因的错误，导致在所有的输出中都出现一个不知来源的None。所以之后的建树函数的参数会变成list的形式。</p><h2 id="B-DS二叉树–叶子数量"><strong>B. DS二叉树–叶子数量</strong></h2><h3 id="题目描述-2">题目描述</h3><p>计算一颗二叉树包含的叶子结点数量。</p><p>提示：叶子是指它的左右孩子为空。</p><p>建树方法采用“先序遍历+空树用0表示”的方法，即给定一颗二叉树的先序遍历的结果为AB0C00D00，其中空节点用字符‘0’表示。则该树的逻辑结构如下图。</p><h3 id="输入-2">输入</h3><p>第一行输入一个整数t，表示有t个测试数据</p><p>第二行起输入二叉树先序遍历的结果，空树用字符‘0’表示，输入t行</p><h3 id="输出-2">输出</h3><p>逐行输出每个二叉树的包含的叶子数量</p><h3 id="题解-2">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTreeNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data</span>):<br>        self.data = data<br>        self.lchild = <span class="hljs-literal">None</span><br>        self.rchild = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>():<br>    <span class="hljs-comment"># 用先序遍历的结果创建二叉树，空节点用&#x27;0&#x27;表示</span><br>    <span class="hljs-comment"># 采用递归建树</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createBiTree</span>(<span class="hljs-params">self, PreOrderResult: <span class="hljs-built_in">str</span></span>):<br>        self.Treestring = PreOrderResult<br>        self.leafCount = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.Treestring) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> self.Treestring[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = BiTreeNode(self.Treestring[<span class="hljs-number">0</span>])<br>        self.Treestring = self.Treestring[<span class="hljs-number">1</span>:]<br>        root.lchild = self.createBiTree(self.Treestring)<br>        self.Treestring = self.Treestring[<span class="hljs-number">1</span>:]<br>        root.rchild = self.createBiTree(self.Treestring)<br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.preOrder(root.lchild)<br>        self.preOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.inOrder(root.lchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.inOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.postOrder(root.lchild)<br>        self.postOrder(root.rchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countLeaf</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> root.lchild == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.rchild == <span class="hljs-literal">None</span>:<br>            self.leafCount += <span class="hljs-number">1</span><br>        self.countLeaf(root.lchild)<br>        self.countLeaf(root.rchild)<br>        <span class="hljs-keyword">return</span> self.leafCount<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        PreOrderResult = <span class="hljs-built_in">input</span>()<br>        tree = BiTree()<br>        root = tree.createBiTree(PreOrderResult)<br>        <span class="hljs-built_in">print</span>(tree.countLeaf(root))<br></code></pre></td></tr></table></figure><h2 id="C-DS二叉树——二叉树之父子结点"><strong>C. DS二叉树——二叉树之父子结点</strong></h2><h3 id="题目描述-3">题目描述</h3><p>给定一颗二叉树的逻辑结构如下图，（先序遍历的结果，空树用字符‘0’表示，例如AB0C00D00），建立该二叉树的二叉链式存储结构。</p><p>编写程序输出该树的所有叶子结点和它们的父亲结点</p><h3 id="输入-3">输入</h3><p>第一行输入一个整数t，表示有t个二叉树</p><p>第二行起，按照题目表示的输入方法，输入每个二叉树的先序遍历，连续输入t行</p><h3 id="输出-3">输出</h3><p>第一行按先序遍历，输出第1个示例的叶子节点</p><p>第二行输出第1个示例中与叶子相对应的父亲节点</p><p>以此类推输出其它示例的结果</p><h3 id="题解-3">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTreeNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data, parent=<span class="hljs-literal">None</span>, lchild=<span class="hljs-literal">None</span>, rchild=<span class="hljs-literal">None</span></span>):<br>        self.data = data<br>        self.parent = parent<br>        self.lchild = lchild<br>        self.rchild = rchild<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>():<br>    <span class="hljs-comment"># 用先序遍历的结果创建二叉树，空节点用&#x27;0&#x27;表示</span><br>    <span class="hljs-comment"># 采用递归建树</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createBiTree</span>(<span class="hljs-params">self, PreOrderResult: <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(PreOrderResult) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> PreOrderResult[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            PreOrderResult.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = BiTreeNode(PreOrderResult[<span class="hljs-number">0</span>])<br>        PreOrderResult.pop(<span class="hljs-number">0</span>)<br>        root.lchild = self.createBiTree(PreOrderResult)<br>        <span class="hljs-keyword">if</span> root.lchild != <span class="hljs-literal">None</span>:<br>            root.lchild.parent = root<br>        root.rchild = self.createBiTree(PreOrderResult)<br>        <span class="hljs-keyword">if</span> root.rchild != <span class="hljs-literal">None</span>:<br>            root.rchild.parent = root<br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.preOrder(root.lchild)<br>        self.preOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.inOrder(root.lchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.inOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.postOrder(root.lchild)<br>        self.postOrder(root.rchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findLeaf</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> root.lchild == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.rchild == <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        self.findLeaf(root.lchild)<br>        self.findLeaf(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findLeafParent</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> root.lchild == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.rchild == <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(root.parent.data, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        self.findLeafParent(root.lchild)<br>        self.findLeafParent(root.rchild)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        PreOrderResult = <span class="hljs-built_in">input</span>()<br>        PreOrderResult = <span class="hljs-built_in">list</span>(PreOrderResult)<br>        tree = BiTree()<br>        root = tree.createBiTree(PreOrderResult)<br>        tree.findLeaf(root)<br>        <span class="hljs-built_in">print</span>()<br>        tree.findLeafParent(root)<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h2 id="D-DS二叉树–层次遍历"><strong>D. DS二叉树–层次遍历</strong></h2><h3 id="题目描述-4">题目描述</h3><p>层次遍历二叉树，是从根结点开始遍历，按层次次序“自上而下，从左至右”访问树中的各结点。</p><p>建树方法采用“先序遍历+空树用0表示”的方法</p><p>建议使用队列结构实现，算法框架如下：</p><p>定义一个空白队列和一个树结点指针p</p><p>设T是指向根结点的指针变量，若二叉树为空，则返回；否则，令p=T，p入队，执行以下循环：</p><p>(1)队首元素出队到p；</p><p>(2)访问p所指向的结点；</p><p>(3)p所指向的结点的左、右子结点依次入队。</p><p>(4)跳转步骤1循环，直到队列空为止</p><p>例如把上述算法中的访问操作定义为输出，算法结果就是把二叉树按层次遍历输出</p><h3 id="输入-4">输入</h3><p>第一行输入一个整数t，表示有t个测试数据</p><p>第二行起输入二叉树先序遍历的结果，空树用字符‘0’表示，输入t行</p><h3 id="输出-4">输出</h3><p>逐行输出每个二叉树的层次遍历结果</p><h3 id="题解-4">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTreeNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data, parent=<span class="hljs-literal">None</span>, lchild=<span class="hljs-literal">None</span>, rchild=<span class="hljs-literal">None</span></span>):<br>        self.data = data<br>        self.parent = parent<br>        self.lchild = lchild<br>        self.rchild = rchild<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>():<br>    <span class="hljs-comment"># 用先序遍历的结果创建二叉树，空节点用&#x27;0&#x27;表示</span><br>    <span class="hljs-comment"># 采用递归建树</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createBiTree</span>(<span class="hljs-params">self, PreOrderResult: <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(PreOrderResult) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> PreOrderResult[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            PreOrderResult.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = BiTreeNode(PreOrderResult[<span class="hljs-number">0</span>])<br>        PreOrderResult.pop(<span class="hljs-number">0</span>)<br>        root.lchild = self.createBiTree(PreOrderResult)<br>        <span class="hljs-keyword">if</span> root.lchild != <span class="hljs-literal">None</span>:<br>            root.lchild.parent = root<br>        root.rchild = self.createBiTree(PreOrderResult)<br>        <span class="hljs-keyword">if</span> root.rchild != <span class="hljs-literal">None</span>:<br>            root.rchild.parent = root<br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.preOrder(root.lchild)<br>        self.preOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.inOrder(root.lchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.inOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.postOrder(root.lchild)<br>        self.postOrder(root.rchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-comment"># 层次遍历从上至下，从左至右访问每个节点并输出值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        queue = []<br>        queue.append(root)<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) != <span class="hljs-number">0</span>:<br>            node = queue.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">print</span>(node.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> node.lchild != <span class="hljs-literal">None</span>:<br>                queue.append(node.lchild)<br>            <span class="hljs-keyword">if</span> node.rchild != <span class="hljs-literal">None</span>:<br>                queue.append(node.rchild)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        PreOrderResult = <span class="hljs-built_in">input</span>()<br>        PreOrderResult = <span class="hljs-built_in">list</span>(PreOrderResult)<br>        tree = BiTree()<br>        root = tree.createBiTree(PreOrderResult)<br>        tree.levelOrder(root)<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h2 id="E-DS树–二叉树高度"><strong>E. DS树–二叉树高度</strong></h2><h3 id="题目描述-5">题目描述</h3><p>给出一棵二叉树，求它的高度。</p><p>注意，二叉树的层数是从1开始</p><h3 id="输入-5">输入</h3><p>第一行输入一个整数t，表示有t个二叉树</p><p>第二行起输入每个二叉树的先序遍历结果，空树用字符‘0’表示，连续输入t行</p><h3 id="输出-5">输出</h3><p>每行输出一个二叉树的高度</p><h3 id="题解-5">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTreeNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data, parent=<span class="hljs-literal">None</span>, lchild=<span class="hljs-literal">None</span>, rchild=<span class="hljs-literal">None</span></span>):<br>        self.data = data<br>        self.parent = parent<br>        self.lchild = lchild<br>        self.rchild = rchild<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>():<br>    <span class="hljs-comment"># 用先序遍历的结果创建二叉树，空节点用&#x27;0&#x27;表示</span><br>    <span class="hljs-comment"># 采用递归建树</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createBiTree</span>(<span class="hljs-params">self, PreOrderResult: <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(PreOrderResult) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> PreOrderResult[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            PreOrderResult.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = BiTreeNode(PreOrderResult[<span class="hljs-number">0</span>])<br>        PreOrderResult.pop(<span class="hljs-number">0</span>)<br>        root.lchild = self.createBiTree(PreOrderResult)<br>        <span class="hljs-keyword">if</span> root.lchild != <span class="hljs-literal">None</span>:<br>            root.lchild.parent = root<br>        root.rchild = self.createBiTree(PreOrderResult)<br>        <span class="hljs-keyword">if</span> root.rchild != <span class="hljs-literal">None</span>:<br>            root.rchild.parent = root<br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.preOrder(root.lchild)<br>        self.preOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.inOrder(root.lchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        self.inOrder(root.rchild)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.postOrder(root.lchild)<br>        self.postOrder(root.rchild)<br>        <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">BiDepth</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        ldepth = self.BiDepth(root.lchild)<br>        rdepth = self.BiDepth(root.rchild)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(ldepth, rdepth) + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        PreOrderResult = <span class="hljs-built_in">input</span>()<br>        PreOrderResult = <span class="hljs-built_in">list</span>(PreOrderResult)<br>        tree = BiTree()<br>        root = tree.createBiTree(PreOrderResult)<br>        <span class="hljs-built_in">print</span>(tree.BiDepth(root))<br></code></pre></td></tr></table></figure><h2 id="F-DS二叉树——二叉树之数组存储"><strong>F. DS二叉树——二叉树之数组存储</strong></h2><h3 id="题目描述-6">题目描述</h3><p>二叉树可以采用数组的方法进行存储，把数组中的数据依次自上而下,自左至右存储到二叉树结点中，一般二叉树与完全二叉树对比，比完全二叉树缺少的结点就在数组中用0来表示。</p><p>从上图可以看出，右边的是一颗普通的二叉树，当它与左边的完全二叉树对比，发现它比完全二叉树少了第5号结点，所以在数组中用0表示，同样它还少了完全二叉树中的第10、11号结点，所以在数组中也用0表示。</p><p>结点存储的数据均为非负整数</p><h3 id="输入-6">输入</h3><p>第一行输入一个整数t，表示有t个二叉树</p><p>第二行起，每行输入一个数组，先输入数组长度，再输入数组内数据，每个数据之间用空格隔开，输入的数据都是非负整数</p><p>连续输入t行</p><h3 id="输出-6">输出</h3><p>每行输出一个示例的先序遍历结果，每个结点之间用空格隔开</p><h3 id="题解-6">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_int_list</span>():<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTreeNode</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data, parent=<span class="hljs-literal">None</span>, lchild=<span class="hljs-literal">None</span>, rchild=<span class="hljs-literal">None</span></span>):<br>        self.data = data<br>        self.parent = parent<br>        self.lchild = lchild<br>        self.rchild = rchild<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span>():<br><span class="hljs-comment"># 用一个以数组方式储存的二叉树，建立一个二叉树</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createBiTree</span>(<span class="hljs-params">self, TreeArray: <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-comment"># 用层次遍历的顺序建立完全二叉树，空节点用&#x27;0&#x27;表示</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(TreeArray) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = BiTreeNode(TreeArray[<span class="hljs-number">0</span>])<br>        queue = []<br>        queue.append(root)<br>        TreeArray.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) != <span class="hljs-number">0</span>:<br>            node = queue.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(TreeArray) != <span class="hljs-number">0</span>:<br>                node.lchild = BiTreeNode(TreeArray[<span class="hljs-number">0</span>])<br>                TreeArray.pop(<span class="hljs-number">0</span>)<br>                node.lchild.parent = node<br>                queue.append(node.lchild)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(TreeArray) != <span class="hljs-number">0</span>:<br>                node.rchild = BiTreeNode(TreeArray[<span class="hljs-number">0</span>])<br>                TreeArray.pop(<span class="hljs-number">0</span>)<br>                node.rchild.parent = node<br>                queue.append(node.rchild)<br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> root.data != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(root.data, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        self.preOrder(root.lchild)<br>        self.preOrder(root.rchild)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        index, TreeArray = read_int_list()<br>        tree = BiTree()<br>        root = tree.createBiTree(TreeArray)<br>        tree.preOrder(root)<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Colorization using Optimization》复现报告</title>
    <link href="/2023/09/16/%E3%80%8AColorization%20using%20Optimization%E3%80%8B%E5%A4%8D%E7%8E%B0%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/09/16/%E3%80%8AColorization%20using%20Optimization%E3%80%8B%E5%A4%8D%E7%8E%B0%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1>《Colorization using Optimization》复现报告</h1><h2 id="简介">简介</h2><p>论文Colorization using Optimization来自于Siggraph2004，论文旨在通过简单的交互实现灰度图的全局彩色化。</p><h2 id="相关工作">相关工作</h2><h3 id="简介-2">简介</h3><p>[Markle and Hunt 1987]提出了一个在至少一个参考帧手动绘制颜色遮罩，然后用运动检测和跟踪将颜色自动分配给没有运动发生的区域的其他帧的方法。</p><p>[Welsh etal. 2002]描述了一种通过参考彩色图像转移颜色来给灰度图着色的技术。他们检测待着色图像每个像素周边的像素亮度值，并与参考图像做比对。在参考图像种选择具有相似领域的颜色传输给待着色像素。</p><h3 id="局限性">局限性</h3><p>[Markle and Hunt 1987]的方法需要艺术家大量的时间去人工划分区域和跨图像追踪。尽快后面出现了自动分割的算法，不过已存在的自动分割方法常常难以处理复杂模糊的边界，也导致这个方法的着色会不准确。</p><p>[Welsh etal. 2002]的这种技术也有着一定的问题。它使得艺术家没有办法去直接选择上色的方案。艺术家必须要找到与待着色区域相似纹理的且颜色是自己希望的参考，这导致艺术家无法控制自己的着色结果。同时这种技术没有考虑颜色在空间上的连续性，有可能会出现很大的颜色跳跃。</p><h2 id="方法">方法</h2><h3 id="预备知识">预备知识</h3><p>YUV颜色空间：不同于RGB的三个通道都是颜色通道。YUV是一种把亮度信息（Y）和颜色信息（U,V）分离的格式。没有UV的时候也可以正常显示图像，Y就是一个灰度图。</p><p>转换方式如下：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>Y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>U</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>V</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0.299</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0.587</mn><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0.114</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mo>−</mo><mn>0.169</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>0.331</mn><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0.5</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0.5</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>0.419</mn><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>0.081</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>R</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>G</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>B</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>+</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>128</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>128</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix} Y\\U \\V\end{bmatrix}=\begin{bmatrix}  0.299&amp;0.587  &amp;0.114 \\  -0.169&amp;-0.331  &amp;0.5 \\  0.5&amp;-0.419  &amp;-0.081\end{bmatrix}\begin{bmatrix} R\\G \\B\end{bmatrix}+\begin{bmatrix}0 \\128 \\128\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0.299</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.169</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0.5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0.587 </span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">0.331 </span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">0.419 </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0.114</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0.5</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">0.081</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">G</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">128</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">128</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="算法原理">算法原理</h3><p>本文的算法基于一个简单的前提：在时间和空间上的相邻且具有相似灰度等级的像素也会具有相同颜色。即如果像素r与他的相邻像素s在亮度上相似，就会具有相似的颜色。</p><p>所以我们可以将其转化为一个最优化问题，即使以下J(U)最小化（V通道同理）</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mi>r</mi><mrow></mrow></munderover><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>s</mi><mo>∈</mo><mi>N</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><mrow></mrow></munderover><msub><mi>w</mi><mrow><mi>r</mi><mi>s</mi></mrow></msub><mi>U</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mtext> </mtext><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext></mrow><annotation encoding="application/x-tex">J(U)=\sum_{r}^{} (U(r)-\sum_{s\in N(r)}^{}w_{rs} U(s)  )^{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.6em;vertical-align:-1.25em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.35em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.866em;vertical-align:-1.516em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.35em;"><span style="top:-1.809em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">rs</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mord"> </span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord"> </span></span></span></span></span></p><p>其中Wrs是一个权重参数，用于体现强度的相似性，计算的公式如下：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mrow><mi>r</mi><mi>s</mi></mrow></msub><mo>∝</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mfrac><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><mi>Y</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>r</mi><mn>2</mn></msubsup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W_{rs} \propto exp(\frac{-(Y(r)-Y(s))^{2} }{2\sigma _{r}^{2} } )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">rs</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∝</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4241em;vertical-align:-0.933em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.933em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>PS:还要注意每个像素r的周围像素权重和需为1。</p><h2 id="复现思路">复现思路</h2><p>优化问题一般都可以转化为求解具有闭式最小二乘解的线性方程组，对于这个方法来说最重要求解的线性方程Ax=b，A是一个关于w的矩阵，而b是一个U/V加权的结果。</p><p>具体来说要使(U)最小化，就要在每个像素上满足：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>U</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>s</mi><mo>∈</mo><mi>N</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><mrow></mrow></munderover><msub><mi>w</mi><mrow><mi>r</mi><mi>s</mi></mrow></msub><mi>U</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">U(r)-\sum_{s\in N(r)}^{}w_{rs} U(s) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.866em;vertical-align:-1.516em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.35em;"><span style="top:-1.809em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">rs</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>对于所有未知像素都根据这个约束列一个线性方程，然后将所有已知量移至等式右侧，左侧只有权重和未知的像素值。对于所有已知像素直接将像素值填充到b的对应位置。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>23</mn></msub><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>24</mn></msub><mtext>  </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>26</mn></msub><mtext> </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>32</mn></msub><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>26</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mo>−</mo><msub><mi>w</mi><mn>42</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>62</mn></msub><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>w</mi><mn>63</mn></msub><mtext>  </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><msub><mi>x</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>3</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>4</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>5</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>6</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><msub><mi>w</mi><mn>21</mn></msub><msub><mi>u</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>25</mn></msub><msub><mi>u</mi><mn>5</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>w</mi><mn>35</mn></msub><msub><mi>u</mi><mn>5</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>w</mi><mn>41</mn></msub><msub><mi>u</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>45</mn></msub><msub><mi>u</mi><mn>5</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mn>5</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>w</mi><mn>65</mn></msub><msub><mi>u</mi><mn>5</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{pmatrix}  1&amp;  0&amp; 0 &amp;0  &amp; 0 &amp;0 \\  0&amp; 1 &amp; -w_{23}  &amp;-w_{24}   &amp; 0 &amp;-w_{26}  \\  0&amp; -w_{32}  &amp;  1&amp; 0 &amp; 0 &amp; -w_{26} \\  0&amp;  -w_{42} &amp;  0&amp; 1 &amp; 0 &amp; 0\\  0&amp; 0 &amp;  0&amp;  0&amp; 1 &amp;0 \\  0&amp; -w_{62}  &amp;-w_{63}   &amp;  0&amp;  0&amp;1\end{pmatrix}\begin{pmatrix}  x_{1}\\ x_{2} \\ x_{3} \\ x_{4} \\ x_{5} \\ x_{6}\end{pmatrix}=\begin{pmatrix} u_{1} \\  w_{21} u_{1}+ w_{25} u_{5}\\ w_{35} u_{5}\\ w_{41} u_{1}+w_{45} u_{5}\\u_{5}\\w_{65} u_{5}\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2001em;vertical-align:-3.35em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.8499em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='7.200em' viewBox='0 0 875 7200'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,3684c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-3692c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 1</span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"> </span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">42</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">62</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"> </span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">  </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0 </span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">24</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">  </span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> 0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">26</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"> </span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">26</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.8499em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='7.200em' viewBox='0 0 875 7200'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,3609c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-3744c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.8499em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='7.200em' viewBox='0 0 875 7200'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,3684c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-3692c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> </span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.8499em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='7.200em' viewBox='0 0 875 7200'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,3609c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-3744c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:7.2001em;vertical-align:-3.35em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.8499em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='7.200em' viewBox='0 0 875 7200'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,3684c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-3692c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"> </span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">25</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">35</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">41</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">45</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">65</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.8499em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='7.200em' viewBox='0 0 875 7200'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,3609c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-3744c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="复现代码">复现代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> sparse<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Tuple</span><br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.sparse.linalg <span class="hljs-keyword">import</span> spsolve<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># from .utils import position_to_id, find_neighbour</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colorizer</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, gray_image_file: <span class="hljs-built_in">str</span>, visual_clues_file: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># opencv读取的默认的格式是bgr的顺序</span><br>        self.original_gray_image = self.gray_image = cv2.cvtColor(cv2.imread(gray_image_file), cv2.COLOR_BGR2RGB)<br>        self.original_visual_clues = self.visual_clues = cv2.cvtColor(cv2.imread(visual_clues_file), cv2.COLOR_BGR2RGB)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_preprocess</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 转换成yuv颜色通道</span><br>        <span class="hljs-comment"># /255.0 是为了进行归一化操作</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            归一化是在图像处理中的一种常用操作，将像素值缩放到0至1的范围</span><br><span class="hljs-string">            可以确保不同图像的数值范围一致，也可以在深度学习中更好地学习图像特征</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.gray_image = cv2.cvtColor(<br>            self.gray_image, cv2.COLOR_RGB2YUV) / <span class="hljs-number">255.0</span><br>        self.visual_clues = cv2.cvtColor(<br>            self.visual_clues, cv2.COLOR_RGB2YUV) / <span class="hljs-number">255.0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_inputs</span>(<span class="hljs-params">self, figure_size: <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>] = (<span class="hljs-params"><span class="hljs-number">12</span>, <span class="hljs-number">12</span></span>)</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 通过matplotlib这个库，可视化输入的两张图像</span><br>        figure = plt.figure(figsize=figure_size)<br>        figure.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>).set_title(<span class="hljs-string">&#x27;Black &amp; White&#x27;</span>)<br>        plt.imshow(self.original_gray_image)<br>        plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>        figure.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>).set_title(<span class="hljs-string">&#x27;Color Hints&#x27;</span>)<br>        plt.imshow(self.original_visual_clues)<br>        plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>        plt.show()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_results</span>(<span class="hljs-params">self, result: np.ndarray</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 可视化最终上色结果</span><br>        fig = plt.figure(figsize=(<span class="hljs-number">25</span>, <span class="hljs-number">17</span>))<br>        fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>).set_title(<span class="hljs-string">&#x27;Black &amp; White&#x27;</span>)<br>        plt.imshow(self.original_gray_image)<br>        plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>        fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>).set_title(<span class="hljs-string">&#x27;Color Hints&#x27;</span>)<br>        plt.imshow(self.original_visual_clues)<br>        plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>        fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>).set_title(<span class="hljs-string">&#x27;Colorized&#x27;</span>)<br>        plt.imshow(result)<br>        plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>        plt.show()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">colorize</span>(<span class="hljs-params">self</span>) -&gt; np.ndarray:<br>        <span class="hljs-comment"># 主函数</span><br>        <span class="hljs-comment"># 步骤1：预处理，转化为YUV空间和归一化</span><br>        self._preprocess()<br>        n, m = self.visual_clues.shape[<span class="hljs-number">0</span>], self.visual_clues.shape[<span class="hljs-number">1</span>]<br>        size = n * m<br>        <span class="hljs-comment"># 步骤2：构建系数矩阵</span><br>        <span class="hljs-comment"># 在构建线性方程时，由于Ax=b中A只由Y决定，所以在求解U和V时用的是同一个A</span><br>        W = sparse.lil_matrix((size, size), dtype=<span class="hljs-built_in">float</span>)<br>        b1 = np.zeros(shape=size)   <span class="hljs-comment"># 求解U时的右侧向量</span><br>        b2 = np.zeros(shape=size)   <span class="hljs-comment"># 求解V时的右侧向量</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(n)):    <span class="hljs-comment"># tqdm是一个进度条，可以可视化的观察运行状态</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>                <span class="hljs-comment"># 鉴于最终上色效果考虑，应该把一些亮度高的区域保留不上色</span><br>                <span class="hljs-keyword">if</span> self.visual_clues[i, j, <span class="hljs-number">0</span>] &gt; <span class="hljs-number">1</span> - <span class="hljs-number">1e-3</span>:<br>                    <span class="hljs-built_in">id</span> = position_to_id(i, j, m)<br>                    W[<span class="hljs-built_in">id</span>, <span class="hljs-built_in">id</span>] = <span class="hljs-number">1</span><br>                    b1[<span class="hljs-built_in">id</span>] = self.gray_image[i, j, <span class="hljs-number">1</span>]<br>                    b2[<span class="hljs-built_in">id</span>] = self.gray_image[i, j, <span class="hljs-number">2</span>]<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-comment"># 将手动上色部分也保留</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(self.gray_image[i, j, <span class="hljs-number">0</span>] - self.visual_clues[i, j, <span class="hljs-number">0</span>]) &gt; <span class="hljs-number">1e-2</span> <span class="hljs-keyword">or</span> \<br>                   <span class="hljs-built_in">abs</span>(self.gray_image[i, j, <span class="hljs-number">1</span>] - self.visual_clues[i, j, <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">1e-2</span> <span class="hljs-keyword">or</span> \<br>                   <span class="hljs-built_in">abs</span>(self.gray_image[i, j, <span class="hljs-number">2</span>] - self.visual_clues[i, j, <span class="hljs-number">2</span>]) &gt; <span class="hljs-number">1e-2</span>:<br>                    <span class="hljs-built_in">id</span> = position_to_id(i, j, m)<br>                    W[<span class="hljs-built_in">id</span>, <span class="hljs-built_in">id</span>] = <span class="hljs-number">1</span><br>                    b1[<span class="hljs-built_in">id</span>] = self.visual_clues[i, j, <span class="hljs-number">1</span>]<br>                    b2[<span class="hljs-built_in">id</span>] = self.visual_clues[i, j, <span class="hljs-number">2</span>]<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-comment"># 剩下的像素根据周边像素的信息和相似度构建W和b矩阵</span><br>                Y = self.gray_image[i, j, <span class="hljs-number">0</span>]<br>                <span class="hljs-built_in">id</span> = position_to_id(i, j, m)<br>                neighbour = find_neighbour(i, j, n, m)<br>                Ys, ids, weights = [], [], []<br>                <span class="hljs-comment"># 求与周边像素的标准差</span><br>                <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> neighbour:<br>                    Ys.append(self.gray_image[pos[<span class="hljs-number">0</span>], pos[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>])<br>                    ids.append(position_to_id(pos[<span class="hljs-number">0</span>], pos[<span class="hljs-number">1</span>], m))<br>                sigma = np.std(Ys)<br>                <span class="hljs-built_in">sum</span> = <span class="hljs-number">0.</span><br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(neighbour)):<br>                    <span class="hljs-keyword">if</span> sigma &gt; <span class="hljs-number">1e-3</span>:<br>                        w = np.exp(-<span class="hljs-number">1</span> * (Ys[k] - Y) * (Ys[k] - Y) / <span class="hljs-number">2</span> / sigma / sigma )<br>                        <span class="hljs-built_in">sum</span> += w<br>                        weights.append(w)<br>                    <span class="hljs-comment"># 防止出现除以0的错误</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">sum</span> += <span class="hljs-number">1.</span><br>                        weights.append(<span class="hljs-number">1.</span>)<br>                <span class="hljs-comment"># 让所有的相似度和为1</span><br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(neighbour)):<br>                    weights[k] /= <span class="hljs-built_in">sum</span><br>                    W[<span class="hljs-built_in">id</span>, ids[k]] += -<span class="hljs-number">1</span> * weights[k]<br>                W[<span class="hljs-built_in">id</span>, <span class="hljs-built_in">id</span>] += <span class="hljs-number">1.</span><br>        <span class="hljs-comment"># 步骤3：求解线性方程</span><br>        result = np.zeros(shape=(n, m, <span class="hljs-number">3</span>))<br>        result[:, :, <span class="hljs-number">0</span>] = self.gray_image[:, :, <span class="hljs-number">0</span>]<br>        W = W.tocsc()<br>        u = spsolve(W, b1)<br>        v = spsolve(W, b2)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>                <span class="hljs-built_in">id</span> = position_to_id(i, j, m)<br>                result[i, j, <span class="hljs-number">1</span>], result[i, j, <span class="hljs-number">2</span>] = u[<span class="hljs-built_in">id</span>], v[<span class="hljs-built_in">id</span>]<br>        result = (np.clip(result, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>) * <span class="hljs-number">255</span>).astype(np.uint8)<br>        cv2.imshow(<span class="hljs-string">&quot;Result&quot;</span>, result[:, :, <span class="hljs-number">1</span>])<br>        cv2.waitKey(<span class="hljs-number">0</span>)<br>        cv2.destroyAllWindows()<br>        result = cv2.cvtColor(result, cv2.COLOR_YUV2RGB)<br>        <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">position_to_id</span>(<span class="hljs-params">x, y, m</span>):<br>    <span class="hljs-keyword">return</span> x * m + y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_neighbour</span>(<span class="hljs-params">x, y, n, m, d=<span class="hljs-number">2</span></span>):<br>    neighbour = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, x - d), <span class="hljs-built_in">min</span>(n, x + d + <span class="hljs-number">1</span>)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, y - d), <span class="hljs-built_in">min</span>(m, y + d + <span class="hljs-number">1</span>)):<br>            <span class="hljs-keyword">if</span> (i != x) <span class="hljs-keyword">or</span> (j != y):<br>                neighbour.append([i, j])<br>    <span class="hljs-keyword">return</span> neighbour<br><br>colorizer = Colorizer(<br>    gray_image_file=<span class="hljs-string">&quot;E:\\code\\Python\\opnecv\\colorization_data\\original\\example.png&quot;</span>,<br>    visual_clues_file=<span class="hljs-string">&quot;E:\\code\\Python\\opnecv\\colorization_data\\visual-clues\\example.png&quot;</span><br>)<br><br>colorizer.plot_inputs()<br><br>result = colorizer.colorize()<br><br>colorizer.plot_results(result)<br></code></pre></td></tr></table></figure><p>复现过程中一路出现了很多的矩阵奇异性问题，迫使我也探索了很多关于稀疏矩阵计算的知识。也再一次次重构代码中优化了自己的代码风格，让逻辑更清晰，可以更好地发现存在的逻辑问题。</p><h3 id="结果图片">结果图片</h3><p><img src="https://i.imgs.ovh/2023/09/16/FREO.png" alt="https://i.imgs.ovh/2023/09/16/FREO.png"></p><h2 id="一些思考">一些思考</h2><p>这篇论文和我前段时间看的《Poisson image editing》在实现逻辑上有相似的地方。两者都是通过一个最小化的最优化问题构建线性方程。</p><p>但这篇文章的构建方法会略微复杂一点，因为他的已知量是分散在图像中的。如果说上一篇的实现方法是梯度场的引导，这篇文章的方法就是让已知颜色像素在U/通道，根据相似度去自行生长发散。</p><p>其中有一点我认为是这个方法比较关键的是计算相似度时的加权 ，加权之后似乎能更有效的保证分割结果的连贯性和有意义。但具体原理可能还是要等后面继续探索。</p><h2 id="参考">参考</h2><ol><li>读源码学算法之Colorization <a href="https://blog.csdn.net/u011426016/article/details/103427914">https://blog.csdn.net/u011426016/article/details/103427914</a></li><li>【计算机图形学】基础 - Colorization using Optimization <a href="https://blog.csdn.net/passer__jw767/article/details/126136158">https://blog.csdn.net/passer__jw767/article/details/126136158</a></li><li>《Colorization Using Optimization》论文理解与复现  <a href="https://www.notion.so/Colorization-using-Optimization-0e050e35c74b4077a7eddde14c8b084a?pvs=21">https://www.cnblogs.com/3-louise-wang/p/16687822.html</a></li><li><a href="https://dl.acm.org/doi/abs/10.1145/1186562.1015780">Colorization using optimization | ACM SIGGRAPH 2004 Papers</a></li><li><a href="https://github.com/Ouroboroz/Colorization">https://github.com/Ouroboroz/Colorization</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《Poisson image editing》复现报告</title>
    <link href="/2023/09/01/%E3%80%8APoisson%20Image%20Editing%E3%80%8B%E5%A4%8D%E7%8E%B0%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/09/01/%E3%80%8APoisson%20Image%20Editing%E3%80%8B%E5%A4%8D%E7%8E%B0%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1>《Poisson image editing》复现报告</h1><h1>论文复现：Poisson image editing</h1><h2 id="论文介绍">论文介绍</h2><p>图像编辑是一个涉及颜色校正，滤镜，变形和插入的任务。经典的做法一般会用滤波器调整图片细节或者直接的克隆工具进行完全的剪切和粘贴。一般来说用上述经典经典工具处理图像时，选定的编辑区域边缘会出现明显的接缝，随后会再通过羽化工具隐藏接缝。</p><p>而这篇文章提出了一种通用的图像编辑机制，可以从中派生出无缝融合，纹理扁平化，局部色彩变化等工具。其核心的数学工具是带有Dirichlet边界条件的泊松偏微分方程。</p><h2 id="原理解析">原理解析</h2><p>对于图像融合而言我们着重满足的有以下两点：</p><ul><li>边缘过渡足够平滑，即梯度尽可能的小</li><li>编辑区域的插入内容纹理得到最大程度保留</li></ul><p>根据以上需求可以提出一种导向插值的方法</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munder><mrow><mi>min</mi><mo>⁡</mo></mrow><mi>f</mi></munder><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>f</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi><mo>+</mo><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><msup><mi>f</mi><mo lspace="0em" rspace="0em">∗</mo></msup><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> s.t. </mtext><mi>f</mi><mo>=</mo><msup><mi>f</mi><mo lspace="0em" rspace="0em">∗</mo></msup><mtext> on </mtext><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \min _{f} \int_{\Omega}|\nabla f|^{2} d x+\int_{\Omega}|\nabla f^{*}|^{2} d x \\ &amp; \text { s.t. } f=f^{*} \text { on } \partial \Omega \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.072em;vertical-align:-1.786em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.286em;"><span style="top:-4.286em;"><span class="pstrut" style="height:3.36em;"></span><span class="mord"></span></span><span style="top:-2.234em;"><span class="pstrut" style="height:3.36em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.786em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.286em;"><span style="top:-4.286em;"><span class="pstrut" style="height:3.36em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.3479em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4336em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4336em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-2.234em;"><span class="pstrut" style="height:3.36em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord"> s.t. </span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mord text"><span class="mord"> on </span></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.786em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>V是引导梯度场，Ω是合并后被覆盖的区域，∂Ω是边界，Ω内的像素用f表示（f未知），Ω外的像素用f∗表示）（已知）</p><p>其解是</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>△</mo><mi>f</mi><mo>=</mo><mi>d</mi><mi>i</mi><mi>v</mi><mo stretchy="false">(</mo><mi>V</mi><mo stretchy="false">)</mo><mi>w</mi><mi>i</mi><mi>t</mi><mi>h</mi><mi>f</mi><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub><mo>=</mo><msup><mi>f</mi><mo lspace="0em" rspace="0em">∗</mo></msup><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\bigtriangleup f=div(V) with f|_{\partial \Omega}=f^{*}|_{\partial \Omega}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">△</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>具体在图像上，由于图像可以看作二元函数，而且xy都是离散的，因此我们可以用差分代替微分。所以可以用拉普拉斯卷积核来计算散度场。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>4</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}  0&amp; 1 &amp;0 \\  1&amp; -4 &amp; 1\\ 0 &amp; 1 &amp;0\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">4</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="代码复现">代码复现</h2><p>无缝融合是泊松图像编辑最直观的应用，因此下文主要复现论文中提到的无缝融合功能，分为常规融合和混合融合两种。</p><h3 id="复现思路">复现思路</h3><ul><li>求解融合后的像素值，需要构建系数矩阵A和向量b。然后利用Ax =b求解x向量。假设需要求解的像素个数为N，对每个矩阵建立一个索引。</li><li>对于每个索引像素(x,y)的索引i，让A[i,i] = -4 , b[i] = div(x,y)</li><li>检查每个像素上下左右是否都在mask内。如果有不在mask内则为边缘像素，不需要系数求解。</li></ul><h3 id="1-常规融合">1.常规融合</h3><ul><li>引导向量场V是源图像的梯度场，其中V含有源图像的纹理和亮度变化等信息</li><li>为了无缝融合，待填补区域边缘与目标图像一致</li><li>整体可以理解为根据边缘像素和引导向量场‘生长’出选区内像素</li></ul><p>SeamlessClone()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> linalg<br><span class="hljs-keyword">import</span> scipy.sparse<br><br><span class="hljs-comment"># 步骤1：读取源图像和目标图像，选择编辑区域</span><br>source_image_path = <span class="hljs-string">&quot;C:\\\\Users\\\\vc020\\\\Pictures\\\\Saved Pictures\\\\374041-Anime-Sunset-Phone-Wallpaper.jpg&quot;</span><br>target_image_path = <span class="hljs-string">&quot;C:\\\\Users\\\\vc020\\\\Pictures\\\\Saved Pictures\\\\wallhaven-rd8e2m.jpg&quot;</span><br><br><span class="hljs-comment"># 读取源图像和目标图像</span><br>source_image = cv2.imread(source_image_path)<br>target_image = cv2.imread(target_image_path)<br><br><span class="hljs-comment"># 创建窗口并设置回调函数</span><br>cv2.namedWindow(<span class="hljs-string">&quot;Source Image&quot;</span>)<br>cv2.setMouseCallback(<span class="hljs-string">&quot;Source Image&quot;</span>, draw_edit_area)<br><br><span class="hljs-comment"># 初始化变量</span><br>edit_points = []<br>drawing = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 显示源图像</span><br>cv2.imshow(<span class="hljs-string">&quot;Source Image&quot;</span>, source_image)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br>source_image = cv2.imread(source_image_path)<br><br><span class="hljs-comment"># 步骤2：选择编辑区域</span><br><span class="hljs-comment"># 根据绘制的多边形创建源图像的掩膜</span><br>edit_mask = np.zeros(source_image.shape[:<span class="hljs-number">2</span>], dtype=np.uint8)<br>cv2.fillPoly(edit_mask, [np.array(edit_points)], color=<span class="hljs-number">255</span>)<br><br><span class="hljs-comment"># 显示生成的掩膜</span><br>cv2.imshow(<span class="hljs-string">&quot;Edit Mask&quot;</span>, edit_mask)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br><span class="hljs-comment"># 计算掩膜的范围</span><br><span class="hljs-built_in">print</span>(edit_points)<br>target_points = edit_points<br>target_points = np.array(target_points)<br>target_points[:, <span class="hljs-number">0</span>] += <span class="hljs-number">1200</span><br>target_points[:, <span class="hljs-number">1</span>] += <span class="hljs-number">370</span><br>target_points.tolist()<br><span class="hljs-built_in">print</span>(target_points)<br><br><span class="hljs-comment"># 根据源图像编辑区域的多边形顶点，在目标图像上创建新的掩膜</span><br>target_mask = np.zeros(target_image.shape[:<span class="hljs-number">2</span>], dtype=np.uint8)<br>cv2.fillPoly(target_mask, [target_points], color=<span class="hljs-number">255</span>)<br><br><span class="hljs-comment"># 显示生成的新目标图像掩膜</span><br>cv2.imshow(<span class="hljs-string">&quot;Target Mask&quot;</span>, target_mask)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br><span class="hljs-comment"># 步骤3：计算目标图像散度场</span><br><span class="hljs-comment"># 将目标图像分解为红绿蓝三个通道</span><br>target_b, target_g, target_r = cv2.split(target_image)<br><span class="hljs-comment"># 计算目标梯度场的散度</span><br>divergence_r_target = cv2.Laplacian(target_r,cv2.CV_64F)<br>divergence_g_target = cv2.Laplacian(target_g,cv2.CV_64F)<br>divergence_b_target = cv2.Laplacian(target_b,cv2.CV_64F)<br><br><span class="hljs-comment"># 步骤4：计算源图像的散度场</span><br><span class="hljs-comment"># 将源图像分解为红绿蓝三个通道</span><br>source_b, source_g, source_r = cv2.split(source_image)<br><span class="hljs-comment"># 计算源梯度场的散度</span><br>divergence_r = cv2.Laplacian(source_r,cv2.CV_64F)<br>divergence_g = cv2.Laplacian(source_g,cv2.CV_64F)<br>divergence_b = cv2.Laplacian(source_b,cv2.CV_64F)<br><br><span class="hljs-comment"># 在目标图像的编辑区域内，使用源图像的散度场替换目标图像的散度场</span><br>target_mask_indices = np.where(target_mask &gt; <span class="hljs-number">0</span>) <span class="hljs-comment"># 获取目标图像编辑区域的索引</span><br>mask_indices = np.where(edit_mask &gt; <span class="hljs-number">0</span>) <span class="hljs-comment"># 获取源图像编辑区域的索引</span><br>divergence_r_target[target_mask_indices] = divergence_r[mask_indices]<br>divergence_g_target[target_mask_indices] = divergence_g[mask_indices]<br>divergence_b_target[target_mask_indices] = divergence_b[mask_indices]<br><br>cv2.imshow(<span class="hljs-string">&quot;Fusion Divergence&quot;</span>, divergence_r_target)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br>result_r = getX(target_r, target_mask, divergence_r_target)<br>result_g = getX(target_g, target_mask, divergence_g_target)<br>result_b = getX(target_b, target_mask, divergence_b_target)<br><br>final = cv2.merge([result_b, result_g, result_r])<br>cv2.imwrite(<span class="hljs-string">&quot;E:\\\\code\\\\Python\\\\opnecv\\\\&quot;</span>+ <span class="hljs-string">&#x27;seamlessClone.jpg&#x27;</span>, final)<br>cv2.imshow(<span class="hljs-string">&quot;Result&quot;</span>, final)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><p>draw_edit_area()函数（交互式在源图像上绘制编辑区域的回调函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_edit_area</span>(<span class="hljs-params">event, x, y, flags, param</span>):<br><span class="hljs-keyword">global</span> edit_points, drawing<br><br><span class="hljs-keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:<br>drawing = <span class="hljs-literal">True</span><br>edit_points.append((x, y))<br><br><span class="hljs-keyword">elif</span> event == cv2.EVENT_LBUTTONUP:<br>drawing = <span class="hljs-literal">False</span><br>cv2.polylines(source_image, [np.array(edit_points)], isClosed=<span class="hljs-literal">True</span>, color=(<span class="hljs-number">0</span>, <span class="hljs-number">240</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>)<br>cv2.imshow(<span class="hljs-string">&quot;Source Image&quot;</span>, source_image)<br><br></code></pre></td></tr></table></figure><p>getX()函数（构造和求解泊松方程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getX</span>(<span class="hljs-params">dst, mask, lap</span>): <span class="hljs-comment">#建立泊松方程并求解</span><br><span class="hljs-comment"># 1 计算求解的像素个数</span><br>loc = np.nonzero(mask)<br>num = loc[<span class="hljs-number">0</span>].shape[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 2. 有多少个像素个数则需要多少个方程，需要构造num*num大小的稀疏矩阵和num大小的b向量</span><br><span class="hljs-comment"># 3. A用lilmatrix，这种矩阵方便逐个添加</span><br>A = scipy.sparse.lil_matrix((num, num), dtype=np.float64)<br>b = np.ndarray((num,), dtype=np.float64) <span class="hljs-comment"># 一维数组,长度只有1, 而且最外层的长度为num</span><br><span class="hljs-comment"># 4. 要将每个像素映射到0~num-1的索引之中，因为A系数矩阵也是根据索引求构造的</span><br>hhash = &#123;(x, y): i <span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(loc[<span class="hljs-number">0</span>], loc[<span class="hljs-number">1</span>]))&#125;<br><span class="hljs-comment"># 用于找上下左右四个像素位置</span><br>dx = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>dy = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 5. 构造A系数矩阵和b向量</span><br><span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(loc[<span class="hljs-number">0</span>], loc[<span class="hljs-number">1</span>])):<br>A[i, i] = -<span class="hljs-number">4</span><br>b[i] = lap[x, y]<br>p = [(x + dx[j], y + dy[j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-comment"># p为上下左右的像素位置</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">if</span> p[j] <span class="hljs-keyword">in</span> hhash: <span class="hljs-comment"># 像素位置在mask内</span><br>A[i, hhash[p[j]]] = <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>b[i] -= dst[p[j]]<br><br><span class="hljs-comment"># 由于A是稀疏矩阵，可以将lilmatrix转成cscmatrix，方便矩阵运算</span><br>A = A.tocsc()<br><span class="hljs-comment"># 6. 求解X</span><br>X = linalg.splu(A).solve(b)<br><br><span class="hljs-comment"># 7. 将X复制到对应位置</span><br>result = np.copy(dst)<br><span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(loc[<span class="hljs-number">0</span>], loc[<span class="hljs-number">1</span>])):<br><span class="hljs-keyword">if</span> X[i] &lt; <span class="hljs-number">0</span>:<br>X[i] = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> X[i] &gt; <span class="hljs-number">255</span>:<br>X[i] = <span class="hljs-number">255</span><br>result[x, y] = X[i]<br><span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure><h3 id="混合融合">混合融合</h3><p>混合融合相比于常规融合，散度场并不是简单的区域替换，而是分方向通过比较源图像和目标图像的梯度场，选取绝对值较大的作为最终梯度。<br>然后再将四个方向的最终梯度场求和得最终的散度场。<br>Mixed seamlessClone</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> linalg<br><span class="hljs-keyword">import</span> scipy.sparse<br><br><span class="hljs-comment"># 步骤1：读取源图像和目标图像</span><br>source_image_path = <span class="hljs-string">&quot;E:\\\\code\\\\Python\\\\opnecv\\\\wallhaven-ne26vk.jpg&quot;</span><br>target_image_path = <span class="hljs-string">&quot;E:\\\\code\\\\Python\\\\opnecv\\\\wallhaven-7p318v.jpg&quot;</span><br><br><span class="hljs-comment"># 读取源图像和目标图像</span><br>source_image = cv2.imread(source_image_path)<br>target_image = cv2.imread(target_image_path)<br><br><span class="hljs-comment"># 将源图像扩展至目标图像的大小</span><br>finalSrc = np.zeros_like(target_image)<br>finalSrc[<span class="hljs-number">456</span>:<span class="hljs-number">1656</span>, <span class="hljs-number">540</span>:<span class="hljs-number">2460</span>] = source_image<br><br>Src = np.zeros_like(target_image)<br>Src[:, :] = finalSrc<br><br><span class="hljs-comment"># 创建窗口并设置回调函数</span><br>cv2.namedWindow(<span class="hljs-string">&quot;Source Image&quot;</span>, cv2.WINDOW_FREERATIO)<br>cv2.namedWindow(<span class="hljs-string">&quot;Source Image&quot;</span>)<br>cv2.setMouseCallback(<span class="hljs-string">&quot;Source Image&quot;</span>, draw_edit_area)<br><br><span class="hljs-comment"># 初始化变量</span><br>edit_points = []<br>drawing = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 显示源图像</span><br>cv2.imshow(<span class="hljs-string">&quot;Source Image&quot;</span>, finalSrc)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br>finalSrc = Src<br><br>cv2.namedWindow(<span class="hljs-string">&quot;src&quot;</span>, cv2.WINDOW_FREERATIO)<br>cv2.imshow(<span class="hljs-string">&quot;src&quot;</span>, Src)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br><span class="hljs-comment"># 步骤2：选择编辑区域</span><br><span class="hljs-comment"># 根据绘制的多边形创建图像的掩膜</span><br>edit_mask = np.zeros(finalSrc.shape[:<span class="hljs-number">2</span>], dtype=np.uint8)<br>cv2.fillPoly(edit_mask, [np.array(edit_points)], color=<span class="hljs-number">255</span>)<br><br><span class="hljs-comment"># 显示生成的掩膜</span><br>cv2.namedWindow(<span class="hljs-string">&quot;Edit Mask&quot;</span>, cv2.WINDOW_FREERATIO)<br>cv2.imshow(<span class="hljs-string">&quot;Edit Mask&quot;</span>, edit_mask)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br><span class="hljs-comment"># 步骤3：求融合散度</span><br>grad = []<br><span class="hljs-comment"># 创建四个方向的卷积核</span><br>kernel = [np.array([[<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]), np.array([[<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]]), np.array([[<span class="hljs-number">0</span>], [-<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>]]), np.array([[<span class="hljs-number">1</span>], [-<span class="hljs-number">1</span>], [<span class="hljs-number">0</span>]])]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>srcGrad = cv2.filter2D(np.float64(finalSrc), -<span class="hljs-number">1</span>, kernel[i])<br>dstGrad = cv2.filter2D(np.float64(target_image), -<span class="hljs-number">1</span>, kernel[i])<br>grad.append(np.where(np.<span class="hljs-built_in">abs</span>(srcGrad) &gt; np.<span class="hljs-built_in">abs</span>(dstGrad), srcGrad, dstGrad))<br>finalLap = np.<span class="hljs-built_in">sum</span>(grad, axis=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 步骤4：求解泊松方程</span><br>result = [getX(a, edit_mask, b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(cv2.split(target_image), cv2.split(finalLap))]<br><br>final = cv2.merge(result)<br>cv2.imwrite(<span class="hljs-string">&quot;E:\\\\code\\\\Python\\\\opnecv\\\\&quot;</span>+ <span class="hljs-string">&#x27;mixed_seamlessClone.jpg&#x27;</span>, final)<br>cv2.namedWindow(<span class="hljs-string">&quot;Result&quot;</span>, cv2.WINDOW_FREERATIO)<br>cv2.imshow(<span class="hljs-string">&quot;Result&quot;</span>, final)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>图形学</tag>
      
      <tag>论文复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
